// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"twitch-crypto-donations/internal/app/donationshistory"
	"twitch-crypto-donations/internal/app/getstreamerinfo"
	"twitch-crypto-donations/internal/app/noncegeneration"
	"twitch-crypto-donations/internal/app/paymentconfirmation"
	"twitch-crypto-donations/internal/app/senddonate"
	"twitch-crypto-donations/internal/app/setobswebhooks"
	"twitch-crypto-donations/internal/app/setuserinfo"
	"twitch-crypto-donations/internal/app/signatureverification"
	"twitch-crypto-donations/internal/app/updatedefaultobssettings"
	"twitch-crypto-donations/internal/config"
	"twitch-crypto-donations/internal/pkg/environment"
	"twitch-crypto-donations/internal/pkg/http"
	"twitch-crypto-donations/internal/pkg/jwt"
	"twitch-crypto-donations/internal/pkg/obsservice"
	"twitch-crypto-donations/internal/pkg/router"
	"twitch-crypto-donations/internal/pkg/server"
)

// Injectors from wire.go:

func InitializeServer(ctx context.Context) (*server.Server, error) {
	dbHost, err := environment.GetDBHost()
	if err != nil {
		return nil, err
	}
	dbPort, err := environment.GetDBPort()
	if err != nil {
		return nil, err
	}
	dbUser, err := environment.GetDBUser()
	if err != nil {
		return nil, err
	}
	dbPassword, err := environment.GetDBPassword()
	if err != nil {
		return nil, err
	}
	dbName, err := environment.GetDBName()
	if err != nil {
		return nil, err
	}
	dbsslMode, err := environment.GetDBSSLMode()
	if err != nil {
		return nil, err
	}
	connectionString := config.NewConnectionString(dbHost, dbPort, dbUser, dbPassword, dbName, dbsslMode)
	migrationsDir, err := environment.GetMigrationsDir()
	if err != nil {
		return nil, err
	}
	db := config.NewDatabase(connectionString, migrationsDir)
	handler := setuserinfo.New(db)
	getstreamerinfoHandler := getstreamerinfo.New(db)
	client := config.NewHttpClient()
	httpClient := http.New(client)
	logrusAdapter := config.NewLogger()
	obsServiceDomain, err := environment.GetOBSServiceDomain()
	if err != nil {
		return nil, err
	}
	obsService := obsservice.New(db, httpClient, logrusAdapter, obsServiceDomain)
	setobswebhooksHandler := setobswebhooks.New(db, obsService, obsServiceDomain)
	senddonateHandler := senddonate.New(obsService, db)
	noncegenerationHandler := noncegeneration.New(db)
	rpcEndpoint, err := environment.GetRpcEndpoint()
	if err != nil {
		return nil, err
	}
	rpcClient := config.NewRpcClient(rpcEndpoint)
	paymentconfirmationHandler := paymentconfirmation.New(rpcClient)
	tokenExpirationHours, err := environment.GetTokenExpirationHours()
	if err != nil {
		return nil, err
	}
	jwtSecret, err := environment.GetJwtSecret()
	if err != nil {
		return nil, err
	}
	manager := jwt.New(tokenExpirationHours, jwtSecret)
	signatureverificationHandler := signatureverification.New(db, manager)
	donationshistoryHandler := donationshistory.New(db)
	updatedefaultobssettingsHandler := updatedefaultobssettings.New(obsService)
	handlers := router.Handlers{
		SetUserInfo:              handler,
		GetStreamerInfo:          getstreamerinfoHandler,
		SetObsWebhooks:           setobswebhooksHandler,
		SendDonate:               senddonateHandler,
		NonceGenerator:           noncegenerationHandler,
		PaymentConfirmation:      paymentconfirmationHandler,
		SignatureVerification:    signatureverificationHandler,
		DonationsHistory:         donationshistoryHandler,
		UpdateDefaultObsSettings: updatedefaultobssettingsHandler,
	}
	routePrefix, err := environment.GetRoutePrefix()
	if err != nil {
		return nil, err
	}
	swaggerPath, err := environment.GetSwaggerPath()
	if err != nil {
		return nil, err
	}
	appEnv, err := environment.GetAppEnv()
	if err != nil {
		return nil, err
	}
	v := config.NewMiddlewares(appEnv, swaggerPath)
	engine := config.NewEngine(handlers, routePrefix, swaggerPath, jwtSecret, logrusAdapter, v)
	httpListenPort, err := environment.GetHTTPListenPort()
	if err != nil {
		return nil, err
	}
	serverServer := config.NewServer(engine, httpListenPort)
	return serverServer, nil
}
